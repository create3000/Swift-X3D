#X3D V3.3 utf8 Sunrise X3D Browser V1.0

PROFILE Full

COMPONENT Shape : 1
COMPONENT Time : 1

UNIT angle degrees 0.0174532925199433
UNIT length cm 0.01

META "comment" "World of Sunrise X3D Editor"
META "created" "Sat, 23 Jan 2021 17:53:31 +0100"
META "creator" "Holger Seelig"
META "generator" "Sunrise X3D Editor V1.0, https://create3000.github.io/Sunrise/"
META "identifier" "file:///Users/holger/Desktop/Sunrise/Swift-X3D/Tests/X3DTests/data/parse.x3dv"
META "modified" "Mon, 25 Jan 2021 15:22:24 +0100"

EXTERNPROTO Extern1 [
  inputOutput MFString url
  inputOutput SFColor  color
]
"proto/proto.x3dv#Test"

EXTERNPROTO Extern2 [
  inputOutput MFString url
  inputOutput SFColor  color
]
[
  "proto/proto.x3dv#Test",
  "proto/proto.x3dv#Test"
]

PROTO Empty [ ]
{
}

PROTO Proto [
  inputOutput SFBool bool1 TRUE
  inputOutput SFBool bool2 FALSE
]
{
  TimeSensor {
    enabled IS bool1
  }
}

PROTO FullProto [
  inputOutput SFBool bool1 TRUE
  inputOutput SFBool bool2 FALSE
  outputOnly  SFBool out
]
{
  EXTERNPROTO Extern2 [
    inputOutput MFString url
    inputOutput SFColor  color
  ]
  [
    "proto/proto.x3dv#Test",
    "proto/proto.x3dv#Test"
  ]

  PROTO Proto [
    inputOutput SFBool bool1 TRUE
    inputOutput SFBool bool2 FALSE
  ]
  {
    TimeSensor {
      enabled IS bool1
    }
  }

  TimeSensor {
    enabled IS out
    enabled FALSE
    loop IS out
  }

  Script {
    inputOutput SFBool enabled IS out
    inputOutput SFBool enabled TRUE
  }

  Proto {
    bool1 IS out
    bool2 IS out
    bool2 TRUE
  }
}

DEF B Box { }

Group {
  children [
    DEF T Transform {
      rotation 1 2 3 230
      children Shape {
        appearance Appearance {
          material Material { }
        }
        geometry Box {
          size 400 200 200
        }
      }
    }
    USE B
    NULL
    Switch { }
    DEF _1 LOD { }
    USE B
  ]
}

USE T

NULL

FullProto {
  bool1 FALSE
  bool2 TRUE
}

DEF I Inline {
  load FALSE
  url "parse-exported.x3dv"
}

DEF Fields Script {
  initializeOnly SFBool      bool1 FALSE
  initializeOnly SFBool      bool2 TRUE
  initializeOnly SFColor     color1 0.1 0.2 0.3
  initializeOnly SFColorRGBA color2 0.1 0.2 0.3 0.4
  inputOutput    SFDouble    double1 2
  inputOutput    SFDouble    double2 1.234567890123457e+19
  inputOutput    SFFloat     float 1
  inputOutput    SFImage     image 1 2 3 0x1 0x2
  inputOutput    SFInt32     int 123
  inputOutput    SFMatrix3d  matrix1 1 2 3 4 5 6 7 8 9
  inputOutput    SFMatrix3f  matrix2 1 2 3 4 5 6 7 8 9
  inputOutput    SFMatrix4d  matrix3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
  inputOutput    SFMatrix4f  matrix4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
  initializeOnly SFNode      transform0 NULL
  initializeOnly SFNode      transform1 USE T
  initializeOnly SFNode      transform2 Transform { }
  initializeOnly SFNode      transform3 Transform {
    translation 1 2 3
  }
  inputOutput    SFRotation  rotation 1 2 3 4
  inputOutput    SFString    string1 ""
  inputOutput    SFString    string2 "a \"string\" in a string"
  inputOutput    SFTime      time 1.234567890123457
  inputOutput    SFVec2d     vec1 1 2
  inputOutput    SFVec2f     vec2 1 2
  inputOutput    SFVec3d     vec3 1 2 3
  inputOutput    SFVec3f     vec4 1 2 3
  inputOutput    SFVec4d     vec5 1 2 3 4
  inputOutput    SFVec4f     vec6 1 2 3 4
  inputOutput    MFBool      bools1 [ ]
  inputOutput    MFBool      bools2 TRUE
  inputOutput    MFBool      bools3 [
    TRUE,
    FALSE,
    TRUE
  ]
  inputOutput    MFColor     colors1 [ ]
  inputOutput    MFColor     colors2 0.1 0.2 0.3
  inputOutput    MFColor     colors3 [
    0.1 0.2 0.3,
    0.4 0.5 0.6,
    0.7 0.8 0.9
  ]
  inputOutput    MFColorRGBA colors4 [ ]
  inputOutput    MFColorRGBA colors5 0.1 0.2 0.3 0.1
  inputOutput    MFColorRGBA colors6 [
    0.1 0.2 0.3 0.1,
    0.4 0.5 0.6 0.2,
    0.7 0.8 0.9 0.3
  ]
  inputOutput    MFInt32     doubles1 [ ]
  inputOutput    MFInt32     doubles2 1
  inputOutput    MFInt32     doubles3 [
    1,
    2,
    3,
    4
  ]
  inputOutput    MFInt32     floats1 [ ]
  inputOutput    MFInt32     floats2 1
  inputOutput    MFInt32     floats3 [
    1,
    2,
    3,
    4
  ]
  inputOutput    MFImage     images1 [ ]
  inputOutput    MFImage     images2 1 2 3 0x1 0x2
  inputOutput    MFImage     images3 [
    1 2 3 0x1 0x2,
    2 2 3 0x1 0x2 0x3 0x4,
    3 2 3 0x1 0x2 0x3 0x4 0x5 0x6
  ]
  inputOutput    MFInt32     ints1 [ ]
  inputOutput    MFInt32     ints2 1
  inputOutput    MFInt32     ints3 [
    1,
    2,
    3,
    4
  ]
  inputOutput    MFMatrix3d  matrices1 [ ]
  inputOutput    MFMatrix3d  matrices2 1 2 3 4 5 6 7 8 9
  inputOutput    MFMatrix3d  matrices3 [
    1 2 3 4 5 6 7 8 9,
    1 2 3 4 5 6 7 8 9,
    1 2 3 4 5 6 7 8 9
  ]
  inputOutput    MFMatrix3f  matrices4 [ ]
  inputOutput    MFMatrix3f  matrices5 1 2 3 4 5 6 7 8 9
  inputOutput    MFMatrix3f  matrices6 [
    1 2 3 4 5 6 7 8 9,
    1 2 3 4 5 6 7 8 9,
    1 2 3 4 5 6 7 8 9
  ]
  inputOutput    MFMatrix4d  matrices7 [ ]
  inputOutput    MFMatrix4d  matrices8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
  inputOutput    MFMatrix4d  matrices9 [
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16,
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16,
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
  ]
  inputOutput    MFMatrix4f  matrices10 [ ]
  inputOutput    MFMatrix4f  matrices11 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
  inputOutput    MFMatrix4f  matrices12 [
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16,
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16,
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
  ]
  initializeOnly MFNode      nodes1 [ ]
  initializeOnly MFNode      nodes2 Transform { }
  initializeOnly MFNode      nodes3 [
    Transform { }
    Box { }
    NULL
    Switch { }
  ]
  initializeOnly MFNode      nodes4 NULL
  inputOutput    MFRotation  rotations1 [ ]
  inputOutput    MFRotation  rotations2 1 2 3 90
  inputOutput    MFRotation  rotations3 [
    1 2 3 90,
    4 5 6 180,
    7 8 9 300
  ]
  inputOutput    MFString    strings1 [ ]
  inputOutput    MFString    strings2 "a \"string\" in a string"
  inputOutput    MFString    strings3 [
    "a \"string\" in a string",
    "another \\ string",
    "more 'strings' in a string and a tab(	)"
  ]
  inputOutput    MFInt32     times1 [ ]
  inputOutput    MFInt32     times2 1
  inputOutput    MFInt32     times3 [
    1,
    2,
    3,
    4
  ]
  inputOutput    MFVec2d     vecs1 [ ]
  inputOutput    MFVec2d     vecs2 0.1 0.23
  inputOutput    MFVec2d     vecs3 [
    0.1 0.2,
    0.4 0.5,
    0.7 0.8
  ]
  inputOutput    MFVec2f     vecs4 [ ]
  inputOutput    MFVec2f     vecs5 0.1 0.2
  inputOutput    MFVec2f     vecs6 [
    0.1 0.2,
    0.4 0.5,
    0.7 0.8
  ]
  inputOutput    MFVec3d     vecs7 [ ]
  inputOutput    MFVec3d     vecs8 0.1 0.2 0.3
  inputOutput    MFVec3d     vecs9 [
    0.1 0.2 0.3,
    0.4 0.5 0.6,
    0.7 0.8 0.9
  ]
  inputOutput    MFVec3f     vecs10 [ ]
  inputOutput    MFVec3f     vecs11 0.1 0.2 0.3
  inputOutput    MFVec3f     vecs12 [
    0.1 0.2 0.3,
    0.4 0.5 0.6,
    0.7 0.8 0.9
  ]
  inputOutput    MFVec4d     vecs13 [ ]
  inputOutput    MFVec4d     vecs14 0.1 0.2 0.3 0.1
  inputOutput    MFVec4d     vecs15 [
    0.1 0.2 0.3 0.1,
    0.4 0.5 0.6 0.2,
    0.7 0.8 0.9 0.3
  ]
  inputOutput    MFVec4f     vecs16 [ ]
  inputOutput    MFVec4f     vecs17 0.1 0.2 0.3 0.1
  inputOutput    MFVec4f     vecs18 [
    0.1 0.2 0.3 0.1,
    0.4 0.5 0.6 0.2,
    0.7 0.8 0.9 0.3
  ]
}

Script {
  inputOutput SFBool bool TRUE

  url "ecmascript:"
}

Script {
  url "ecmascript:"
}

DEF Touch TouchSensor { }

DEF Debug Script {
  inputOnly SFTime set_time

  url "ecmascript:
function initialize ()
{
   //print (Browser .currentScene .toJSONString ())
}
function set_time ()
{
   var xml  = Browser .currentScene .toXMLString  ()
   var json = Browser .currentScene .toJSONString ()
   var vrml = Browser .currentScene .toVRMLString ()

   print (xml)

   var xml_vrml  = Browser .createX3DFromString (xml)  .toVRMLString ()
   var json_vrml = Browser .createX3DFromString (json) .toVRMLString ()
   var vrml_vrml = Browser .createX3DFromString (vrml) .toVRMLString ()

   print ('print and reparse')
   print (\"xml \", xml_vrml  == vrml)
   print (\"json\", json_vrml == vrml)
   print (\"vrml\", vrml_vrml == vrml)

	//print (json_vrml)
}"
}

DEF Timer TimeSensor {
  loop TRUE
}

DEF Interpolator PositionInterpolator {
  key [
    0,
    1
  ]
  keyValue [
    -5 0 0,
    5 0 0
  ]
}

IMPORT I.ExportedTransform AS ImportedTransform
ROUTE Interpolator.value_changed TO ImportedTransform.set_translation

ROUTE Timer.fraction_changed TO Interpolator.set_fraction
ROUTE Touch.touchTime TO Debug.set_time
ROUTE _1.metadata_changed TO B.set_metadata

EXPORT B
EXPORT B AS B1
EXPORT T AS T1
